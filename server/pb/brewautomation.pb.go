// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: brewautomation.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageCode int32 `protobuf:"varint,1,opt,name=messageCode,proto3" json:"messageCode,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_brewautomation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_brewautomation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_brewautomation_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetMessageCode() int32 {
	if x != nil {
		return x.MessageCode
	}
	return 0
}

type TempLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature  float32 `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	FermentRunId int32   `protobuf:"varint,2,opt,name=fermentRunId,proto3" json:"fermentRunId,omitempty"`
}

func (x *TempLogRequest) Reset() {
	*x = TempLogRequest{}
	mi := &file_brewautomation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempLogRequest) ProtoMessage() {}

func (x *TempLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brewautomation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempLogRequest.ProtoReflect.Descriptor instead.
func (*TempLogRequest) Descriptor() ([]byte, []int) {
	return file_brewautomation_proto_rawDescGZIP(), []int{1}
}

func (x *TempLogRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TempLogRequest) GetFermentRunId() int32 {
	if x != nil {
		return x.FermentRunId
	}
	return 0
}

type TempLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Temperature  float32 `protobuf:"fixed32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	FermentRunId int32   `protobuf:"varint,3,opt,name=fermentRunId,proto3" json:"fermentRunId,omitempty"`
	Timestamp    string  `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TempLogResponse) Reset() {
	*x = TempLogResponse{}
	mi := &file_brewautomation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempLogResponse) ProtoMessage() {}

func (x *TempLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brewautomation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempLogResponse.ProtoReflect.Descriptor instead.
func (*TempLogResponse) Descriptor() ([]byte, []int) {
	return file_brewautomation_proto_rawDescGZIP(), []int{2}
}

func (x *TempLogResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TempLogResponse) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TempLogResponse) GetFermentRunId() int32 {
	if x != nil {
		return x.FermentRunId
	}
	return 0
}

func (x *TempLogResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type FermentRunGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FermentRunGetRequest) Reset() {
	*x = FermentRunGetRequest{}
	mi := &file_brewautomation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentRunGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentRunGetRequest) ProtoMessage() {}

func (x *FermentRunGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brewautomation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentRunGetRequest.ProtoReflect.Descriptor instead.
func (*FermentRunGetRequest) Descriptor() ([]byte, []int) {
	return file_brewautomation_proto_rawDescGZIP(), []int{3}
}

func (x *FermentRunGetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FermentRunCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FermentRunCreateRequest) Reset() {
	*x = FermentRunCreateRequest{}
	mi := &file_brewautomation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentRunCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentRunCreateRequest) ProtoMessage() {}

func (x *FermentRunCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brewautomation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentRunCreateRequest.ProtoReflect.Descriptor instead.
func (*FermentRunCreateRequest) Descriptor() ([]byte, []int) {
	return file_brewautomation_proto_rawDescGZIP(), []int{4}
}

func (x *FermentRunCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FermentRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FermentRunResponse) Reset() {
	*x = FermentRunResponse{}
	mi := &file_brewautomation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FermentRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentRunResponse) ProtoMessage() {}

func (x *FermentRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brewautomation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentRunResponse.ProtoReflect.Descriptor instead.
func (*FermentRunResponse) Descriptor() ([]byte, []int) {
	return file_brewautomation_proto_rawDescGZIP(), []int{5}
}

func (x *FermentRunResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FermentRunResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeviceInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	DeviceId string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (x *DeviceInstruction) Reset() {
	*x = DeviceInstruction{}
	mi := &file_brewautomation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInstruction) ProtoMessage() {}

func (x *DeviceInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_brewautomation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInstruction.ProtoReflect.Descriptor instead.
func (*DeviceInstruction) Descriptor() ([]byte, []int) {
	return file_brewautomation_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceInstruction) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeviceInstruction) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

var File_brewautomation_proto protoreflect.FileDescriptor

var file_brewautomation_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x72, 0x65, 0x77, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x65, 0x77, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x56, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x6d,
	0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x26, 0x0a, 0x14, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x46, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x12, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x43, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x32, 0xcf, 0x03, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x52,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x67, 0x12,
	0x1e, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x12, 0x24, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x72, 0x65, 0x77,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x12, 0x27, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62,
	0x72, 0x65, 0x77, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x62, 0x72, 0x65, 0x77, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x57, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x62, 0x72,
	0x65, 0x77, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_brewautomation_proto_rawDescOnce sync.Once
	file_brewautomation_proto_rawDescData = file_brewautomation_proto_rawDesc
)

func file_brewautomation_proto_rawDescGZIP() []byte {
	file_brewautomation_proto_rawDescOnce.Do(func() {
		file_brewautomation_proto_rawDescData = protoimpl.X.CompressGZIP(file_brewautomation_proto_rawDescData)
	})
	return file_brewautomation_proto_rawDescData
}

var file_brewautomation_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_brewautomation_proto_goTypes = []any{
	(*Command)(nil),                 // 0: brewautomation.Command
	(*TempLogRequest)(nil),          // 1: brewautomation.TempLogRequest
	(*TempLogResponse)(nil),         // 2: brewautomation.TempLogResponse
	(*FermentRunGetRequest)(nil),    // 3: brewautomation.FermentRunGetRequest
	(*FermentRunCreateRequest)(nil), // 4: brewautomation.FermentRunCreateRequest
	(*FermentRunResponse)(nil),      // 5: brewautomation.FermentRunResponse
	(*DeviceInstruction)(nil),       // 6: brewautomation.DeviceInstruction
	(*emptypb.Empty)(nil),           // 7: google.protobuf.Empty
}
var file_brewautomation_proto_depIdxs = []int32{
	1, // 0: brewautomation.API.CreateTempLog:input_type -> brewautomation.TempLogRequest
	3, // 1: brewautomation.API.GetFermentRun:input_type -> brewautomation.FermentRunGetRequest
	4, // 2: brewautomation.API.CreateFermentRun:input_type -> brewautomation.FermentRunCreateRequest
	7, // 3: brewautomation.API.SubscribeDeviceInstruction:input_type -> google.protobuf.Empty
	6, // 4: brewautomation.API.PublishDeviceInstruction:input_type -> brewautomation.DeviceInstruction
	2, // 5: brewautomation.API.CreateTempLog:output_type -> brewautomation.TempLogResponse
	5, // 6: brewautomation.API.GetFermentRun:output_type -> brewautomation.FermentRunResponse
	5, // 7: brewautomation.API.CreateFermentRun:output_type -> brewautomation.FermentRunResponse
	6, // 8: brewautomation.API.SubscribeDeviceInstruction:output_type -> brewautomation.DeviceInstruction
	7, // 9: brewautomation.API.PublishDeviceInstruction:output_type -> google.protobuf.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_brewautomation_proto_init() }
func file_brewautomation_proto_init() {
	if File_brewautomation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brewautomation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brewautomation_proto_goTypes,
		DependencyIndexes: file_brewautomation_proto_depIdxs,
		MessageInfos:      file_brewautomation_proto_msgTypes,
	}.Build()
	File_brewautomation_proto = out.File
	file_brewautomation_proto_rawDesc = nil
	file_brewautomation_proto_goTypes = nil
	file_brewautomation_proto_depIdxs = nil
}
